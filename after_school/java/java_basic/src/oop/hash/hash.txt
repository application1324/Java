어떠한 사람 중에 홍길동을 찾을때,

어떠한 목록이 있다 가정할때,
목록에서 하나씩 비교하여, 홍길동을 찾는다.

그치만 이러하게 한다면, 많이 데이터가 존재할 때, 수행속도가 많이 느려진다.

hash는
key와 value으로 값을 저장할때는,
홍길동을 찾을 때는 뒤에 있을것이다
라고 예상을 하여 15쯤에서 찾는 메서드이다.

hashSet, hashMap를 제공한다.

hashSet
set 인터페이스을 지원하는 구현 클래스이다.
순서대로 입력되지도 않고 일정한 순서을 유지하지 않는다.
그리고 null의 값을 넣을수 있으며, 중복을 허용하지 않는다.

중복을 걸러내는 과정
- 객체을 저장하기전에 먼저 hashcode() 메서드를 호출해서 해시코드을 얻어낸다음
저장되어 있는 객체들의 해시 코드와 비교한 뒤 같은 해시 코드가 있다면 다시 equals() 메소드로
두 객체를 비교해서 true가 나오면 동일한 객채로 판단하고 중복 저장을 하지 앟는다.

선언
HashSet<T> set = new HashSet<>();

메서드
add(value) : 값을 추가함
remove(value) : 값 제거
clear() : 모든 값 제거
size() : HashSet 크기
contains(value) : 값이 있는지 확인

출력
System.out.println(set);
- 전체 출력
- get 메서드가 존재하지 않아서 하나의 객체를 가지고 올 수가 없다.
    -하나의 객겣를 가져오기 위해서는 Iterator를 사용해야 한다.
    - iterator() 메서드를 호출하면 얻을 수 있다.
    - Iterator에서 하나의 객체를 가져올 떄는 next() 메서드를 사용한다.
    - 먼저 가져올 객체가 있는지 확인하기 위해 hasNext() 메서드를 사용해여 호가인하는 것이 좋다.
      - hasNext() 메서드는 가져올 객체가 있으면 true, 없으면 false를 반환한다.

Iterator iter = set.iterator();
while (iter.hasNext()) {
    System.out.println(iter.next());
}